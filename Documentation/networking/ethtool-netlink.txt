                        Netlink interface for ethtool
                        =============================


Basic information
-----------------

Netlink interface for ethtool uses generic netlink family "ethtool" (userspace
application should use macros ETHTOOL_GENL_NAME and ETHTOOL_GENL_VERSION
defined in <linux/ethtool_netlink.h> uapi header). This family does not use
a specific header, all information in requests and replies is passed using
netlink attributes.

The ethtool netlink interface uses extended ACK for error and warning
reporting, userspace application developers are encouraged to make these
messages available to user in a suitable way.

Requests can be divided into three categories: "get" (retrieving information),
"set" (setting parameters) and "action" (invoking an action).

All "set" and "action" type requests require admin privileges (CAP_NET_ADMIN
in the namespace). Most "get" type requests are allowed for anyone but there
are exceptions (where the response contains sensitive information). In some
cases, the request as such is allowed for anyone but unprivileged users have
attributes with sensitive information (e.g. wake-on-lan password) omitted.


Conventions
-----------

Attributes which represent a boolean value usually use u8 type so that we can
distinguish three states: "on", "off" and "not present" (meaning the
information is not available in "get" requests or value is not to be changed
in "set" requests). For these attributes, the "true" value should be passed as
number 1 but any non-zero value should be understood as "true" by recipient.

Some request types allow passing an attribute named ETHTOOL_A_*_INFOMASK with
a bitmask telling kernel that we are only interested in some parts of the
information. If info mask is omitted, all available information is returned.
Meaning of info mask bits depends on request type and is listed below.


Device identification
---------------------

When appropriate, network device is identified by a nested attribute named
ETHTOOL_A_*_DEV. This attribute can contain

    ETHTOOL_A_DEV_INDEX		(u32)		device ifindex
    ETHTOOL_A_DEV_NAME		(string)	device name

In device related requests, one of these is sufficient; if both are used, they
must match (i.e. identify the same device). In device related replies both are
provided by kernel. In dump requests, device is not specified and kernel
replies with one message per network device (only those for which the request
is supported).


Bit sets
--------

For short bitmaps of (reasonably) fixed length, standard NLA_BITFIELD32 type
is used. For arbitrary length bitmaps, ethtool netlink uses a nested attribute
with contents of one of two forms: compact (two binary bitmaps representing
bit values and mask of affected bits) and bit-by-bit (list of bits identified
by either index or name).

Compact form: nested (bitset) atrribute contents:

    ETHTOOL_A_BITSET_LIST	(flag)		no mask, only a list
    ETHTOOL_A_BITSET_SIZE	(u32)		number of significant bits
    ETHTOOL_A_BITSET_VALUE	(binary)	bitmap of bit values
    ETHTOOL_A_BITSET_MASK	(binary)	bitmap of valid bits

Value and mask must have length at least ETHTOOL_A_BITSET_SIZE bits rounded up
to a multiple of 32 bits. They consist of 32-bit words in host byte order,
words ordered from least significant to most significant (i.e. the same way as
bitmaps are passed with ioctl interface).

For compact form, ETHTOOL_A_BITSET_SIZE and ETHTOOL_A_BITSET_VALUE are
mandatory.  Similar to BITFIELD32, a compact form bit set requests to set bits
in the mask to 1 (if the bit is set in value) or 0 (if not) and preserve the
rest. If ETHTOOL_A_BITSET_LIST is present, there is no mask and bitset
represents a simple list of bits.

Kernel bit set length may differ from userspace length if older application is
used on newer kernel or vice versa. If userspace bitmap is longer, an error is
issued only if the request actually tries to set values of some bits not
recognized by kernel.

Bit-by-bit form: nested (bitset) attribute contents:

    ETHTOOL_A_BITSET_LIST	(flag)		no mask, only a list
    ETHTOOL_A_BITSET_SIZE	(u32)		number of significant bits
    ETHTOOL_A_BITSET_BITS	(nested)	array of bits
	ETHTOOL_A_BITSET_BIT
	    ETHTOOL_A_BIT_INDEX	(u32)		bit index (0 for LSB)
            ETHTOOL_A_BIT_NAME	(string)	bit name
	    ETHTOOL_A_BIT_VALUE	(flag)		present if bit is set
        ETHTOOL_A_BITSET_BIT
	...

Bit size is optional for bit-by-bit form. ETHTOOL_A_BITSET_BITS nest can only
contain ETHTOOL_A_BITS_BIT attributes but there can be an arbitrary number of
them.  A bit may be identified by its index or by its name. When used in
requests, listed bits are set to 0 or 1 according to ETHTOOL_A_BIT_VALUE, the
rest is preserved. A request fails if index exceeds kernel bit length or if
name is not recognized.

When ETHTOOL_A_BITSET_LIST flag is present, bitset is interpreted as a simple
bit list. ETHTOOL_A_BIT_VALUE attributes are not used in such case. Bit list
represents a bitmap with listed bits set and the rest zero.

In requests, application can use either form. Form used by kernel in reply is
determined by a flag in flags field of request header. Semantics of value and
mask depends on the attribute. General idea is that flags control request
processing, info_mask control which parts of the information are returned in
"get" request and index identifies a particular subcommand or an object to
which the request applies.


List of message types
---------------------

    ETHNL_CMD_EVENT			notification only
    ETHNL_CMD_GET_STRSET
    ETHNL_CMD_SET_STRSET		response only
    ETHNL_CMD_GET_INFO
    ETHNL_CMD_SET_INFO			response only
    ETHNL_CMD_GET_SETTINGS
    ETHNL_CMD_SET_SETTINGS

All constants use ETHNL_CMD_ prefix, usually followed by "GET", "SET" or "ACT"
to indicate the type.

Messages of type "get" are used by userspace to request information and
usually do not contain any attributes (that may be added later for dump
filtering). Kernel response is in the form of corresponding "set" message;
the same message can be also used to set (some of) the parameters, except for
messages marked as "response only" in the table above. "Get" messages with
NLM_F_DUMP flags and no device identification dump the information for all
devices supporting the request.

Type ETHNL_CMD_EVENT is special, these messages are never used in userspace
requests or kernel replies. They are only sent by kernel to sockets listening
to "monitor" multicast group to inform userspace about certain events.

Later sections describe the format and semantics of these request messages.


EVENT
-----

EVENT messages are only used in kernel multicast notifications. Atributes
correspond to specific event types, the same type can appear multiple times.

    ETHTOOL_A_EVENT_NEWDEV		(nested)	new device registered
       ETHTOOL_A_NEWDEV_DEV		    (nested)	    new device
    ETHTOOL_A_EVENT_DELDEV		(nested)	device unregistered
       ETHTOOL_A_DELDEV_DEV		    (nested)	    removed device
    ETHTOOL_A_EVENT_RENAMEDEV		(nested)	device renamed
       ETHTOOL_A_RENAMEDEV_DEV		    (nested)	    renamed device

For ETHTOOL_A_EVENT_RENAMEDEV, the name in ETHTOOL_A_RENAMEDEV_DEV is the new
name after the rename.

Userspace application must expect multiple events to be present in one message
and also multiple events of the same type (e.g. two or more newly registered
devices).


GET_STRSET
----------

Requests contents of a string set as provided by ioctl commands
ETHTOOL_GSSET_INFO and ETHTOOL_GSTRINGS. String sets are not user writeable so
that the corresponding SET_STRSET message is only used in kernel replies.
There are two types of string sets: global (independent of a device, e.g.
device feature names) and device specific (e.g. device private flags).

Request contents:

    ETHTOOL_A_STRSET_DEV		(nested)	device identification
    ETHTOOL_A_STRSET_COUNTS		(flag)		request only counts
    ETHTOOL_A_STRSET_STRINGSET		(nested)	string set to request
        ETHTOOL_A_STRINGSET_ID		(u32)		set id

Kernel response contents:

    ETHTOOL_A_STRSET_DEV		(nested)	device identification
    ETHTOOL_A_STRSET_STRINGSET		(nested)	string set to request
        ETHTOOL_A_STRINGSET_ID		    (u32)	    set id
        ETHTOOL_A_STRINGSET_COUNT	    (u32)	    number of strings
        ETHTOOL_A_STRINGSET_STRINGS	    (nested)	    array of strings
            ETHTOOL_A_STRING_INDEX		(u32)		string index
            ETHTOOL_A_STRING_VALUE		(string)	string value

ETHTOOL_A_STRSET_DEV, if present, identifies the device to request device
specific string sets for. Depending on its presence a and NLM_F_DUMP flag,
there are three type of GET_STRSET requests:

 - no NLM_F_DUMP, no device: get "global" stringsets
 - no NLM_F_DUMP, with device: get string sets related to the device
 - NLM_F_DUMP, no device: get device related string sets for all devices

If there is no ETHTOOL_A_STRSET_STRINGSET attribute, all string sets of
requested type are returned, otherwise only those specified in the request.
Flag ETHTOOL_A_STRSET_COUNTS tells kernel to only return string counts of the
sets, not the actual strings.


GET_INFO
--------

GET_INFO requests information provided by ioctl commands ETHTOOL_GDRVINFO,
ETHTOOL_GPERMADDR and ETHTOOL_GET_TS_INFO to provide basic device information.
Common pattern is that all information is read only so that SET_INFO message
exists but is only used by kernel for replies to GET_INFO requests. There is
also no corresponding notification.

Request contents:

    ETHTOOL_A_INFO_DEV			(nested)	device identification
    ETHTOOL_A_INFO_INFOMASK		    (u32)	    info mask
    ETHTOOL_A_INFO_COMPACT		    (flag)	    compact bitsets

Info mask bits meaning:

    ETHTOOL_IM_INFO_DRVINFO		driver info (GDRVINFO)
    ETHTOOL_IM_INFO_PERMADDR		permanent HW address (GPERMADDR)
    ETHTOOL_IM_INFO_TSINFO		timestamping info (GET_TS_INFO)

Kernel response contents:

    ETHTOOL_A_INFO_DEV			(nested)	device identification
    ETHTOOL_A_INFO_DRVINFO		    (nested)	    driver information
        ETHTOOL_A_DRVINFO_DRIVER		(string)	driver name
        ETHTOOL_A_DRVINFO_FWVERSION		(string)	firmware version
        ETHTOOL_A_DRVINFO_BUSINFO		(string)	bus address
        ETHTOOL_A_DRVINFO_EROM_VER		(string)	exp. ROM version
    ETHTOOL_A_INFO_TSINFO		(nested)	timestamping info
        ETHTOOL_A_TSINFO_TIMESTAMPING	    (bitset)	    supported flags
        ETHTOOL_A_TSINFO_PHC_INDEX		(u32)		associated PHC
        ETHTOOL_A_TSINFO_TX_TYPES		(bitset)	Tx types
        ETHTOOL_A_TSINFO_RX_FILTERS		(bitset)	Rx filters

The meaning of DRVINFO attributes follows the corresponding fields of
ETHTOOL_GDRVINFO response. Second part with various counts and sizes is
omitted as these are not really needed (and if they are, they can be easily
found by different means). Driver version is also omitted as it is rather
misleading in most cases.

ETHTOOL_A_TSINFO_PHC_INDEX can be unsigned as there is no need for special
value; if no PHC is associated, the attribute is not present.

GET_INFO requests allow dumps.


GET_SETTINGS
------------

GET_SETTINGS request retrieves information provided by ETHTOOL_GLINKSETTINGS,
ETHTOOL_GWOL, ETHTOOL_GMSGLVL and ETHTOOL_GLINK ioctl requests. The request
doesn't use any attributes.

Request attributes:

    ETHTOOL_A_SETTINGS_DEV		(nested)	device identification
    ETHTOOL_A_SETTINGS_INFOMASK		(u32)		info mask
    ETHTOOL_A_SETTINGS_COMPACT		(flag)		compact bitsets

Info mask bits meaning:

    ETHTOOL_IM_SETTINGS_LINKINFO	link settings
    ETHTOOL_IM_SETTINGS_LINKMODES	link modes and related
    ETHTOOL_IM_SETTINGS_LINKSTATE	link state
    ETHTOOL_IM_SETTINGS_WOL		struct ethtool_wolinfo
    ETHTOOL_IM_SETTINGS_DEBUG		debugging

Response contents:

    ETHTOOL_A_SETTINGS_DEV		(nested)	device identification
    ETHTOOL_A_SETTINGS_LINK_INFO	(nested)	link settings
        ETHTOOL_A_LINKINFO_PORT		    (u8)	    physical port
        ETHTOOL_A_LINKINFO_PHYADDR	    (u8)	    phy MDIO address
        ETHTOOL_A_LINKINFO_TP_MDIX	    (u8)	    MDI(-X) status
        ETHTOOL_A_LINKINFO_TP_MDIX_CTRL	    (u8)	    MDI(-X) control
        ETHTOOL_A_LINKINFO_TRANSCEIVER	    (u8)	    transceiver
    ETHTOOL_A_SETTINGS_LINK_MODES	(nested)	link modes
        ETHTOOL_A_LINKMODES_AUTONEG	    (u8)	    autonegotiation status
        ETHTOOL_A_LINKMODES_OURS	    (bitset)	    advertised link modes
        ETHTOOL_A_LINKMODES_PEER	    (bitset)	    partner link modes
        ETHTOOL_A_LINKMODES_SPEED	    (u32)	    link speed (Mb/s)
        ETHTOOL_A_LINKMODES_DUPLEX	    (u8)	    duplex mode
    ETHTOOL_A_SETTINGS_LINK_STATE	(nested)	link state
        ETHTOOL_A_LINKSTATE_LINK	    (u8)	    link on/off/unknown
    ETHTOOL_A_SETTINGS_WOL		(nested)	wake on LAN settings
        ETHTOOL_A_WOL_MODES		    (bitfield32)    wake on LAN modes
        ETHTOOL_A_WOL_SOPASS		    (binary)	    SecureOn password
    ETHTOOL_A_SETTINGS_DEBUG		(nested)	debugging
        ETHTOOL_A_DEBUG_MSG_MASK	    (bitfield32)    debug message mask

Most of the attributes and their values have the same meaning as matching
members of the corresponding ioctl structures. For ETHTOOL_A_LINKMODES_OURS,
value represents advertised modes and mask represents supported modes.
ETHTOOL_A_LINKMODES_PEER in the reply is a bit list.

For ETHTOOL_A_WOL_MODES, selector reports wake on LAN modes supported by the
device and value enabled modes.

ETHTOOL_A_DEBUG_MSG_MASK corresponds to message level (which is actually
a bitfield) as reported by ETHTOOL_GMSGLVL. The selector reports all message
types recognized by kernel and value types enabled for the device.

GET_SETTINGS request is allowed for unprivileged user but ETHTOOL_A_WOL_SOPASS
is only provided by kernel in response to privileged (netns CAP_NET_ADMIN)
requests.

GET_SETTINGS requests allow dumps and messages in the same format as response
to them are broadcasted as notifications on change of these settings using
netlink or ioctl ethtool interface.


SET_SETTINGS
------------

SET_SETTINGS request allows setting some of the data reported by GET_SETTINGS.
Request flags, info_mask and index are ignored. These attributes are allowed
to be passed with SET_SETTINGS request:

    ETHTOOL_A_SETTINGS_DEV		(nested)	device identification
    ETHTOOL_A_SETTINGS_LINK_INFO	(nested)	link settings
        ETHTOOL_A_LINKINFO_PORT		    (u8)	    physical port
        ETHTOOL_A_LINKINFO_PHYADDR	    (u8)	    MDIO address of phy
        ETHTOOL_A_LINKINFO_TP_MDIX_CTRL	    (u8)	    MDI(-X) control
    ETHTOOL_A_SETTINGS_LINK_MODES	(nested)	link modes
        ETHTOOL_A_LINKMODES_AUTONEG	    (u8)	    autonegotiation
        ETHTOOL_A_LINKMODES_OURS	    (bitset)	    advertised link modes
        ETHTOOL_A_LINKMODES_SPEED	    (u32)	    link speed (Mb/s)
        ETHTOOL_A_LINKMODES_DUPLEX	    (u8)	    duplex mode
    ETHTOOL_A_SETTINGS_WOL		(nested)	wake on LAN settings
        ETHTOOL_A_WOL_MODES		    (bitfield32)    wake on LAN modes
        ETHTOOL_A_WOL_SOPASS		    (binary)	    SecureOn password
    ETHTOOL_A_SETTINGS_DEBUG		(nested)	debugging
        ETHTOOL_A_DEBUG_MSG_MASK	    (bitfield32)    message mask

ETHTOOL_A_LINKMODES_OURS bit set allows setting advertised link modes. If
autonegotiation is on (either set now or kept from before), advertised modes
are not changed (no ETHTOOL_A_LINKMODES_OURS attribute) and at least one of
speed and duplex is specified, kernel adjusts advertised modes to all
supported modes matching speed, duplex or both (whatever is specified). This
autoselection is done on ethtool side with ioctl interface, netlink interface
is supposed to allow requesting changes without knowing what exactly kernel
supports.

ETHTOOL_A_WOL_MODES bitfield is interpreted in the usual way, i.e. bits set in
the selector are set to 0 or 1 according to value. To allow the semantics of
the ioctl interface where the whole bitmap is set rather than only modified,
selectors may have also bits not supported by device set and an error is only
issued if any of them is also set in the value (i.e. if userspace tries to
enable mode not supported by device). ETHTOOL_A_SETTINGS_MSGLEVEL bitfield
also allows bits not recognized by kernel in selector as long as the request
does not attempt to enable them.


Request translation
-------------------

The following table maps iosctl commands to netlink commands providing their
functionality. Entries with "n/a" in right column are commands which do not
have their netlink replacement yet.

ioctl command			netlink command
---------------------------------------------------------------------
ETHTOOL_GSET			ETHNL_CMD_GET_SETTINGS
ETHTOOL_SSET			ETHNL_CMD_SET_SETTINGS
ETHTOOL_GDRVINFO		ETHNL_CMD_GET_INFO
ETHTOOL_GREGS			n/a
ETHTOOL_GWOL			ETHNL_CMD_GET_SETTINGS
ETHTOOL_SWOL			ETHNL_CMD_SET_SETTINGS
ETHTOOL_GMSGLVL			ETHNL_CMD_GET_SETTINGS
ETHTOOL_SMSGLVL			ETHNL_CMD_SET_SETTINGS
ETHTOOL_NWAY_RST		n/a
ETHTOOL_GLINK			ETHNL_CMD_GET_SETTINGS
ETHTOOL_GEEPROM			n/a
ETHTOOL_SEEPROM			n/a
ETHTOOL_GCOALESCE		n/a
ETHTOOL_SCOALESCE		n/a
ETHTOOL_GRINGPARAM		n/a
ETHTOOL_SRINGPARAM		n/a
ETHTOOL_GPAUSEPARAM		n/a
ETHTOOL_SPAUSEPARAM		n/a
ETHTOOL_GRXCSUM			n/a
ETHTOOL_SRXCSUM			n/a
ETHTOOL_GTXCSUM			n/a
ETHTOOL_STXCSUM			n/a
ETHTOOL_GSG			n/a
ETHTOOL_SSG			n/a
ETHTOOL_TEST			n/a
ETHTOOL_GSTRINGS		ETHNL_CMD_GET_STRSET
ETHTOOL_PHYS_ID			n/a
ETHTOOL_GSTATS			n/a
ETHTOOL_GTSO			n/a
ETHTOOL_STSO			n/a
ETHTOOL_GPERMADDR		rtnetlink RTM_GETLINK
ETHTOOL_GUFO			n/a
ETHTOOL_SUFO			n/a
ETHTOOL_GGSO			n/a
ETHTOOL_SGSO			n/a
ETHTOOL_GFLAGS			n/a
ETHTOOL_SFLAGS			n/a
ETHTOOL_GPFLAGS			n/a
ETHTOOL_SPFLAGS			n/a
ETHTOOL_GRXFH			n/a
ETHTOOL_SRXFH			n/a
ETHTOOL_GGRO			n/a
ETHTOOL_SGRO			n/a
ETHTOOL_GRXRINGS		n/a
ETHTOOL_GRXCLSRLCNT		n/a
ETHTOOL_GRXCLSRULE		n/a
ETHTOOL_GRXCLSRLALL		n/a
ETHTOOL_SRXCLSRLDEL		n/a
ETHTOOL_SRXCLSRLINS		n/a
ETHTOOL_FLASHDEV		n/a
ETHTOOL_RESET			n/a
ETHTOOL_SRXNTUPLE		n/a
ETHTOOL_GRXNTUPLE		n/a
ETHTOOL_GSSET_INFO		ETHNL_CMD_GET_STRSET
ETHTOOL_GRXFHINDIR		n/a
ETHTOOL_SRXFHINDIR		n/a
ETHTOOL_GFEATURES		n/a
ETHTOOL_SFEATURES		n/a
ETHTOOL_GCHANNELS		n/a
ETHTOOL_SCHANNELS		n/a
ETHTOOL_SET_DUMP		n/a
ETHTOOL_GET_DUMP_FLAG		n/a
ETHTOOL_GET_DUMP_DATA		n/a
ETHTOOL_GET_TS_INFO		ETHNL_CMD_GET_INFO
ETHTOOL_GMODULEINFO		n/a
ETHTOOL_GMODULEEEPROM		n/a
ETHTOOL_GEEE			n/a
ETHTOOL_SEEE			n/a
ETHTOOL_GRSSH			n/a
ETHTOOL_SRSSH			n/a
ETHTOOL_GTUNABLE		n/a
ETHTOOL_STUNABLE		n/a
ETHTOOL_GPHYSTATS		n/a
ETHTOOL_PERQUEUE		n/a
ETHTOOL_GLINKSETTINGS		ETHNL_CMD_GET_SETTINGS
ETHTOOL_SLINKSETTINGS		ETHNL_CMD_SET_SETTINGS
ETHTOOL_PHY_GTUNABLE		n/a
ETHTOOL_PHY_STUNABLE		n/a
ETHTOOL_GFECPARAM		n/a
ETHTOOL_SFECPARAM		n/a
